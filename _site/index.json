{
  "ASE_Suyash_Silwal_77356849/README.html": {
    "href": "ASE_Suyash_Silwal_77356849/README.html",
    "title": "ASE Portfolio | ASE Project",
    "keywords": "ASE Portfolio Fill in the fields below. Your Name: Suyash Silwal Your Group: B Your Tutor:Resham Bahadur Pun Your UniID:77356849 Keep your progress up to date below. Put \"DONE\" after each section, when you have done it. Checkpoint 1 Version Control (1) 5 marks At least two documented commits to provided on GitHub Classroom BEFORE 12pm 7th October. At least 5 documented commits. Readme.md file filled in correctly. 2 Unit Tests for basic drawing commands above (1) 5 marks Unit Test for moveto command (variables storing pen position are correct) Unit Test for drawTo command (variables storing pen position are correct) Unit Test for a multiline program. 3 XML Comments/documentation produced (1) 5 marks* Fully documented with XML comments and Documentation web site produced 4 Exception Handling (1) 5 marks* 5 Library (DLL) installed and working with reasonable user interface (2) 10 marks Form interface with program window, output window and run button BOOSE DLL library installed call about method and display returned information in output/debug window you can use System.Diagnostics to output to the debug window ### Done 6 Basic drawing commands of the library are implemented (2) 10 marks Moveto, circle, rect, pencolour, write. Unrestricted drawing programs can be run (1unrestrictedDrawing.boose) Tutor's Feedback Final Submission 1 Further Version Control (1) 5 marks You must continue to use VC to a professional standard with frequent and clear commits Your Readme.md must be up to date 2 Use of Interfaces (1) 5 marks Interfaces to be used for all classes where appropriate 3 Further Unit Testing (1) 5 marks Tests for full program all of the facilities completed in 5,6 and 7 below It is up to you how design your tests (i.e. one test per facility or one test testing many but they must be clearly documented with XML comments) 4 Design Patterns (1) 5 marks Use of factory Design Pattern for command creation Demonstrate the use of another design pattern of your choice (for 5,6 and 7 you can click the links to see the example BOOSE programs that must be run, these are in your Portfolio. You must run the unrestricted programs and replace the image already there with an image of your BOOSE Interpreter running the BOOSE programs. You may show further programs in your portfolio.) 5 Replaced variables (2) Int 4 marks Real 4 marks Array 5 marks 6 Replaced if, while, for (2) While 5 marks For 6 marks If else 6 marks 7 Replaced Methods (2) 5 marks 8 Additional (web version, text-based version, extension to BOOSE itself, etc, discuss with your tutor) (2) 10 marks Tutor's Feedback note Remember that the BOOSE library is a work in progress and is likely to have bug fixes and updates. Check Discord and/or myBeckett to see if updates have been released. Report any bugs to @dmullier\\ v1.0"
  },
  "api/ASE_Assignment_Test_Case.CommandFactoryTest.html": {
    "href": "api/ASE_Assignment_Test_Case.CommandFactoryTest.html",
    "title": "Class CommandFactoryTest | ASE Project",
    "keywords": "Class CommandFactoryTest Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit tests for the StoredCommandFactory class. Ensures that the MakeCommand method correctly creates instances of commands and handles invalid inputs appropriately. [TestClass] public class CommandFactoryTest Inheritance object CommandFactoryTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Initializes the test by creating a new instance of StoredCommandFactory. This method is executed before each test method runs. [TestInitialize] public void SetUp() TestMakeCommand_Array_ShouldReturnReset() Tests that the \"array\" command returns a ApplicationArray object. [TestMethod] public void TestMakeCommand_Array_ShouldReturnReset() TestMakeCommand_Boolean_ShouldReturnReset() Tests that the \"boolean\" command returns a ApplicationBoolean object. [TestMethod] public void TestMakeCommand_Boolean_ShouldReturnReset() TestMakeCommand_Call_ShouldReturnReset() Tests that the \"call\" command returns a BOOSE.Call object. [TestMethod] public void TestMakeCommand_Call_ShouldReturnReset() TestMakeCommand_Circle_ShouldReturnAppCircle() Tests that the MakeCommand method returns an instance of MyAppCircle when provided with the \"circle\" command. [TestMethod] public void TestMakeCommand_Circle_ShouldReturnAppCircle() TestMakeCommand_Clear_ShouldReturnClear() Tests that the MakeCommand method returns an instance of MyAppClear when provided with the \"clear\" command. [TestMethod] public void TestMakeCommand_Clear_ShouldReturnClear() TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() Tests that the MakeCommand method returns an instance of MyAppDrawTo when provided with the \"drawto\" command. [TestMethod] public void TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() TestMakeCommand_Else_ShouldReturnReset() Tests that the \"else\" command returns a ApplicationElse object. [TestMethod] public void TestMakeCommand_Else_ShouldReturnReset() TestMakeCommand_End_ShouldReturnReset() Tests that the \"end\" command returns a ApplicationEnd object. [TestMethod] public void TestMakeCommand_End_ShouldReturnReset() TestMakeCommand_Evaluation_ShouldReturnReset() Tests that the \"call\" command returns a BOOSE.Evaluation object. [TestMethod] public void TestMakeCommand_Evaluation_ShouldReturnReset() TestMakeCommand_Fill_ShouldReturnFill() Tests that the MakeCommand method returns an instance of MyAppFill when provided with the \"fill\" command. [TestMethod] public void TestMakeCommand_Fill_ShouldReturnFill() TestMakeCommand_For_ShouldReturnReset() Tests that the \"for\" command returns a ApplicationFor object. [TestMethod] public void TestMakeCommand_For_ShouldReturnReset() TestMakeCommand_If_ShouldReturnReset() Tests that the \"else\" command returns a ApplicationIf object. [TestMethod] public void TestMakeCommand_If_ShouldReturnReset() TestMakeCommand_Int_ShouldReturnReset() Tests that the \"int\" command returns a ApplicationInt object. [TestMethod] public void TestMakeCommand_Int_ShouldReturnReset() TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() Tests that the MakeCommand method throws a FactoryException when provided with an invalid command string. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() Tests that the MakeCommand method returns an instance of MyAppMoveTo when provided with the \"moveto\" command. [TestMethod] public void TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() TestMakeCommand_Peek_ShouldReturnReset() Tests that the \"poke\" command returns a ApplicationPeek object. [TestMethod] public void TestMakeCommand_Peek_ShouldReturnReset() TestMakeCommand_PenColour_ShouldReturnAppPenColour() Tests that the MakeCommand method returns an instance of MyAppPenColour when provided with the \"pencolour\" command. [TestMethod] public void TestMakeCommand_PenColour_ShouldReturnAppPenColour() TestMakeCommand_PenSize_ShouldReturnPenSize() Tests that the MakeCommand method returns an instance of MyAppPenSize when provided with the \"pensize\" command. [TestMethod] public void TestMakeCommand_PenSize_ShouldReturnPenSize() TestMakeCommand_Poke_ShouldReturnReset() Tests that the \"poke\" command returns a ApplicationPoke object. [TestMethod] public void TestMakeCommand_Poke_ShouldReturnReset() TestMakeCommand_Real_ShouldReturnReset() Tests that the \"real\" command returns a ApplicationReal object. [TestMethod] public void TestMakeCommand_Real_ShouldReturnReset() TestMakeCommand_Rect_ShouldReturnAppRectangle() Tests that the MakeCommand method returns an instance of MyAppRectangle when provided with the \"rect\" command. [TestMethod] public void TestMakeCommand_Rect_ShouldReturnAppRectangle() TestMakeCommand_Reset_ShouldReturnReset() Tests that the MakeCommand method returns an instance of MyAppReset when provided with the \"reset\" command. [TestMethod] public void TestMakeCommand_Reset_ShouldReturnReset() TestMakeCommand_Tri_ShouldReturnTriangle() Tests that the MakeCommand method returns an instance of MyAppTriangle when provided with the \"tri\" command. [TestMethod] public void TestMakeCommand_Tri_ShouldReturnTriangle() TestMakeCommand_While_ShouldReturnReset() Tests that the \"while\" command returns a ApplicationWhile object. [TestMethod] public void TestMakeCommand_While_ShouldReturnReset() TestMakeCommand_WriteTo_ShouldReturnWriteTo() Tests that the MakeCommand method returns an instance of MyAppWriteText when provided with the \"writeto\" command. [TestMethod] public void TestMakeCommand_WriteTo_ShouldReturnWriteTo() TestMakeCommand_method_ShouldReturnReset() Tests that the \"method\" command returns a ApplicationMethod object. [TestMethod] public void TestMakeCommand_method_ShouldReturnReset()"
  },
  "api/ASE_Assignment_Test_Case.CommandUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.CommandUnitTests.html",
    "title": "Class CommandUnitTests | ASE Project",
    "keywords": "Class CommandUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll [TestClass] public class CommandUnitTests Inheritance object CommandUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [TestInitialize] public void Setup() Test_ArrayCommand_Restricted() public void Test_ArrayCommand_Restricted() Test_ArrayCommand_UnRestricted() public void Test_ArrayCommand_UnRestricted() Test_ForCommand_Restricted() [TestMethod] public void Test_ForCommand_Restricted() Test_ForCommand_Unrestricted() [TestMethod] public void Test_ForCommand_Unrestricted() Test_IFCommand_Restricted() [TestMethod] public void Test_IFCommand_Restricted() Test_IFCommand_Unrestricted() [TestMethod] public void Test_IFCommand_Unrestricted() Test_IntCommand_Restricted() [TestMethod] public void Test_IntCommand_Restricted() Test_IntCommand_UnRestricted() [TestMethod] public void Test_IntCommand_UnRestricted() Test_MethodCommand_UnRestricted() public void Test_MethodCommand_UnRestricted() Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() [TestMethod] public void Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Test_ProgramSizeCommand_UnRestricted() public void Test_ProgramSizeCommand_UnRestricted() Test_RealCommand_Restricted() [TestMethod] public void Test_RealCommand_Restricted() Test_RealCommand_Unrestricted() [TestMethod] public void Test_RealCommand_Unrestricted() Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() [TestMethod] public void Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Tests that running a single command does not change the global output exception message. [TestMethod] public void Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Examples This test runs a single moveto command and verifies that no exception is thrown: mockParser.ParseProgram(\"moveto 100,100\"); program.Run(); Assert.IsTrue(true, \"No exception should be thrown when a valid single command is executed.\"); Remarks Validates that even when a single valid command is executed, no exception is thrown during execution. Test_WhileCommand_Restricted() [TestMethod] public void Test_WhileCommand_Restricted() Test_WhileCommand_Unrestricted() [TestMethod] public void Test_WhileCommand_Unrestricted()"
  },
  "api/ASE_Assignment_Test_Case.GloabalCofigTest.html": {
    "href": "api/ASE_Assignment_Test_Case.GloabalCofigTest.html",
    "title": "Class GloabalCofigTest | ASE Project",
    "keywords": "Class GloabalCofigTest Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit tests for the GlobalConfig class. Ensures that the configuration properties are set and retrieved correctly. [TestClass] public class GloabalCofigTest Inheritance object GloabalCofigTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestSetAndGetIsFillEnabled() Tests that the filedStatus property (IsFillEnabled) can be set and retrieved correctly. [TestMethod] public void TestSetAndGetIsFillEnabled() TestSetAndGetMaxX() Tests that the MaxX property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetMaxX() TestSetAndGetMaxY() Tests that the MaxY property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetMaxY() TestSetAndGetPenSize() Tests that the PenSize property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetPenSize()"
  },
  "api/ASE_Assignment_Test_Case.MyAppCanvasTest.html": {
    "href": "api/ASE_Assignment_Test_Case.MyAppCanvasTest.html",
    "title": "Class MyAppCanvasTest | ASE Project",
    "keywords": "Class MyAppCanvasTest Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit tests for the MyAppCanvas class. Ensures that canvas operations and configurations work as expected. [TestClass] public sealed class MyAppCanvasTest Inheritance object MyAppCanvasTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields canvas The instance of DrawingCanvas used for testing. public DrawingCanvas canvas Field Value DrawingCanvas Methods DrawTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() Ensures an exception is thrown when attempting to draw to coordinates outside the canvas bounds. [TestMethod] [ExpectedException(typeof(CanvasException))] public void DrawTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() DrawTo_ShouldThrowException_WhenGraphicsContextIsNull() Ensures exceptions are thrown when invalid conditions are met for drawing or movement operations. [TestMethod] [ExpectedException(typeof(CanvasException))] public void DrawTo_ShouldThrowException_WhenGraphicsContextIsNull() DrawTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Verifies that the cursor position is updated correctly when drawing to valid coordinates. [TestMethod] public void DrawTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() MoveTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() Ensures an exception is thrown when attempting to move the cursor to coordinates outside the canvas bounds. [TestMethod] [ExpectedException(typeof(CanvasException))] public void MoveTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() MoveTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Verifies that the cursor position is updated correctly when moving to valid coordinates. [TestMethod] public void MoveTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Rect_ShouldDrawFilledRectangle_WhenValid() Verifies that a filled rectangle is drawn correctly when valid dimensions are provided. [TestMethod] public void Rect_ShouldDrawFilledRectangle_WhenValid() Rect_ShouldThrowException_WhenDimensionsAreInvalid() Ensures an exception is thrown when attempting to draw a rectangle with invalid dimensions. [TestMethod] [ExpectedException(typeof(CanvasException))] public void Rect_ShouldThrowException_WhenDimensionsAreInvalid() SetCanvas_ShouldInitialize_WhenBitmapAndGraphicsAreValid() Verifies that valid bitmap and graphics are set correctly for the canvas. [TestMethod] public void SetCanvas_ShouldInitialize_WhenBitmapAndGraphicsAreValid() SetColour_ShouldThrowException_WhenRGBValuesAreInvalid() Ensures an exception is thrown when attempting to set an invalid RGB color. [TestMethod] [ExpectedException(typeof(CanvasException))] public void SetColour_ShouldThrowException_WhenRGBValuesAreInvalid() SetUp() Initializes the canvas object before each test. [TestInitialize] public void SetUp() TestBoundaryPenPosition() Validates pen position stays within canvas boundaries. [TestMethod] public void TestBoundaryPenPosition() TestCircleExceedsCanvas() Ensures an exception is thrown if the circle exceeds canvas bounds. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestCircleExceedsCanvas() TestCustomCanvasSizeInitialization() Verifies that custom canvas sizes can be set correctly. [TestMethod] public void TestCustomCanvasSizeInitialization() TestDefaultConstructor() Verifies the default constructor initializes the canvas with default values. [TestMethod] public void TestDefaultConstructor() TestDrawCircleInvalidRadius() Ensures an exception is thrown when drawing a circle with an invalid radius. [TestMethod] public void TestDrawCircleInvalidRadius() TestDrawCircleValid() Verifies a circle can be drawn with valid parameters. [TestMethod] public void TestDrawCircleValid() TestExceedMaximumCanvasSize() Ensures an exception is thrown when exceeding maximum canvas size. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestExceedMaximumCanvasSize() TestInvalidCanvasSize_ShouldThrowCanvasException() Ensures an exception is thrown when invalid canvas dimensions are set. [TestMethod] public void TestInvalidCanvasSize_ShouldThrowCanvasException() TestResetCanvas() Verifies that the canvas reset functionality works correctly. [TestMethod] public void TestResetCanvas() TestSetPenColorValid() Verifies that a valid pen color can be set. [TestMethod] public void TestSetPenColorValid() TestSetPenPositionInvalid() Ensures invalid pen positions are reset to default. [TestMethod] public void TestSetPenPositionInvalid() TestSetPenPositionValid() Verifies the pen position can be set with valid coordinates. [TestMethod] public void TestSetPenPositionValid() TestSetPenSizeInvalid() Ensures invalid pen sizes are reset to the default value. [TestMethod] public void TestSetPenSizeInvalid() TestSetPenSizeValid() Verifies that a valid pen size can be set. [TestMethod] public void TestSetPenSizeValid() TestToggleShapeFilling() Tests the toggle functionality of shape filling. [TestMethod] public void TestToggleShapeFilling()"
  },
  "api/ASE_Assignment_Test_Case.MyAppCircleUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyAppCircleUnitTests.html",
    "title": "Class MyAppCircleUnitTests | ASE Project",
    "keywords": "Class MyAppCircleUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit tests for the MyAppCircle class. [TestClass] public class MyAppCircleUnitTests Inheritance object MyAppCircleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Verifies that CheckParameters(string[]) does not throw an exception when provided with valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the constructor correctly initializes an instance of MyAppCircle when provided with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes resources needed for the tests. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyAppClearUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyAppClearUnitTests.html",
    "title": "Class MyAppClearUnitTests | ASE Project",
    "keywords": "Class MyAppClearUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit tests for the MyAppClear class. [TestClass] public class MyAppClearUnitTests Inheritance object MyAppClearUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Tests that CheckParameters(string[]) ignores unexpected parameters gracefully without throwing exceptions. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Tests that CheckParameters(string[]) does not throw an exception when the parameter list is empty. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Tests that CheckParameters(string[]) does not throw an exception when the parameter list is null. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Tests that the constructor initializes an instance of MyAppClear correctly when provided with a valid canvas object. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldClearCanvas_WhenCanvasIsValid() Verifies that the Execute() method clears the canvas. [TestMethod] public void Execute_ShouldClearCanvas_WhenCanvasIsValid() Execute_ShouldHandleNullCanvas_Gracefully() Tests that Execute() handles a null canvas gracefully by throwing an appropriate exception. [TestMethod] public void Execute_ShouldHandleNullCanvas_Gracefully() Execute_ShouldNotThrowException_WhenCanvasIsEmpty() Ensures that executing the clear command on an empty canvas does not throw an exception. [TestMethod] public void Execute_ShouldNotThrowException_WhenCanvasIsEmpty() TestInitialize() Initializes resources needed for the tests. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyAppDrawToUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyAppDrawToUnitTests.html",
    "title": "Class MyAppDrawToUnitTests | ASE Project",
    "keywords": "Class MyAppDrawToUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit tests for the MyAppDrawTo command functionality. [TestClass] public class MyAppDrawToUnitTests Inheritance object MyAppDrawToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This test class verifies the behavior of the MyAppDrawTo command, including parameter validation and initialization. Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that CheckParameters does not throw an exception when parameters are valid. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the constructor initializes a valid MyAppDrawTo command instance. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() Tests that the constructor throws a RestrictionException when coordinates are negative. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() TestInitialize() Initializes the test environment by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyAppFillUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyAppFillUnitTests.html",
    "title": "Class MyAppFillUnitTests | ASE Project",
    "keywords": "Class MyAppFillUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit tests for the MyAppFill command functionality. [TestClass] public class MyAppFillUnitTests Inheritance object MyAppFillUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This test class verifies the behavior of the MyAppFill command, including parameter validation and execution. Methods CheckParameters_ShouldThrowCommandException_WhenMoreThanOneParameterProvided() Tests that CheckParameters throws a CommandException when more than one parameter is provided. [TestMethod] public void CheckParameters_ShouldThrowCommandException_WhenMoreThanOneParameterProvided() CheckParameters_ShouldThrowCommandException_WhenNoParametersProvided() Tests that CheckParameters throws a CommandException when no parameters are provided. [TestMethod] public void CheckParameters_ShouldThrowCommandException_WhenNoParametersProvided() CheckParameters_ShouldThrowCommandException_WhenParameterIsEmpty() Tests that CheckParameters throws a CommandException when the parameter is empty. [TestMethod] public void CheckParameters_ShouldThrowCommandException_WhenParameterIsEmpty() Constructor_ShouldInitialize_WhenTextIsValid() Tests that the constructor initializes a valid MyAppFill command instance when text is valid. [TestMethod] public void Constructor_ShouldInitialize_WhenTextIsValid() Constructor_ShouldThrowException_WhenTextIsNull() Tests that the constructor throws an ArgumentNullException when text is null. [TestMethod] public void Constructor_ShouldThrowException_WhenTextIsNull() Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Tests that Execute throws a RestrictionException when text exceeds the allowed length. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() Tests that Execute throws a RestrictionException when text is whitespace. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() TestInitialize() Initializes the test environment by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyAppMoveToUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyAppMoveToUnitTests.html",
    "title": "Class MyAppMoveToUnitTests | ASE Project",
    "keywords": "Class MyAppMoveToUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit tests for the MyAppMoveTo command functionality. [TestClass] public class MyAppMoveToUnitTests Inheritance object MyAppMoveToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This test class verifies the behavior of the MyAppMoveTo command, including parameter validation and execution. Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that CheckParameters does not throw an exception when parameters are valid. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the constructor initializes a valid MyAppMoveTo command instance when parameters are valid. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() Tests that the constructor throws a RestrictionException when coordinates exceed the limit. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() TestInitialize() Sets up the test environment by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyAppParserTest.html": {
    "href": "api/ASE_Assignment_Test_Case.MyAppParserTest.html",
    "title": "Class MyAppParserTest | ASE Project",
    "keywords": "Class MyAppParserTest Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit test class for testing the parser functionality in the application. [TestClass] public class MyAppParserTest Inheritance object MyAppParserTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the test environment by initializing necessary objects. [TestInitialize] public void SetUp() TestParseCommand_ShouldReturnValidCommand_ForKnownCommand() Tests whether ParseCommand returns a valid ICommand object for a known command. [TestMethod] public void TestParseCommand_ShouldReturnValidCommand_ForKnownCommand()"
  },
  "api/ASE_Assignment_Test_Case.MyAppPenColourUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyAppPenColourUnitTests.html",
    "title": "Class MyAppPenColourUnitTests | ASE Project",
    "keywords": "Class MyAppPenColourUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit tests for the MyAppPenColour command functionality. [TestClass] public class MyAppPenColourUnitTests Inheritance object MyAppPenColourUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This test class verifies the behavior of the MyAppPenColour command, including constructor validation and parameter checking. Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that CheckParameters does not throw an exception when valid parameters are provided. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Remarks Verifies that the method successfully accepts a valid RGB parameter set and does not throw any exceptions. Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the constructor initializes a valid MyAppPenColour command instance when parameters are valid. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Sets up the test environment by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyAppPenSizeUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyAppPenSizeUnitTests.html",
    "title": "Class MyAppPenSizeUnitTests | ASE Project",
    "keywords": "Class MyAppPenSizeUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit test class for testing the PenSize command functionality. [TestClass] public class MyAppPenSizeUnitTests Inheritance object MyAppPenSizeUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests whether the CheckParameters method does not throw an exception for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests whether the PenSize constructor initializes properly when valid parameters are provided. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Execute_ShouldHandleBoundaryValue_Zero() Tests whether the Execute method handles a boundary value of zero for the pen size. [TestMethod] public void Execute_ShouldHandleBoundaryValue_Zero() TestInitialize() Sets up the test environment by initializing a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyAppRectangleUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyAppRectangleUnitTests.html",
    "title": "Class MyAppRectangleUnitTests | ASE Project",
    "keywords": "Class MyAppRectangleUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit tests for the MyAppRectangle command functionality. [TestClass] public class MyAppRectangleUnitTests Inheritance object MyAppRectangleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This test class verifies the behavior of the MyAppRectangle command, including constructor validation and parameter checking. Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that CheckParameters does not throw an exception when valid parameters are provided. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Remarks Verifies that the method successfully accepts a valid parameter set for rectangle dimensions (width and height) and does not throw any exceptions. Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the constructor initializes a valid MyAppRectangle command instance when parameters are valid. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Sets up the test environment by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyAppResetsUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyAppResetsUnitTests.html",
    "title": "Class MyAppResetsUnitTests | ASE Project",
    "keywords": "Class MyAppResetsUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit tests for the MyAppReset command functionality. [TestClass] public class MyAppResetsUnitTests Inheritance object MyAppResetsUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This test class verifies the behavior of the MyAppReset command, including its constructor, parameter validation, and execution logic. Methods CheckParameters_ShouldIgnoreAdditionalParameters() Tests that CheckParameters ignores additional parameters without throwing exceptions. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() Remarks Verifies that the method accepts unexpected or additional parameters without affecting functionality. CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Tests that CheckParameters does not throw an exception when the parameter list is empty. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Remarks Verifies that the method gracefully handles an empty parameter list without throwing exceptions. CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Tests that CheckParameters does not throw an exception when the parameter list is null. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Remarks Verifies that the method gracefully handles a null parameter list without throwing exceptions. Constructor_ShouldInitialize_WhenCanvasIsValid() Tests that the constructor initializes a valid MyAppReset command instance when a valid canvas is provided. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() Tests that executing the command throws a NullReferenceException when the canvas is null. [TestMethod] public void Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() Remarks This test ensures that a proper exception is thrown if the command is executed without a valid canvas object. TestInitialize() Sets up the test environment by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyAppStoredProgramUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyAppStoredProgramUnitTests.html",
    "title": "Class MyAppStoredProgramUnitTests | ASE Project",
    "keywords": "Class MyAppStoredProgramUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll [TestClass] public class MyAppStoredProgramUnitTests Inheritance object MyAppStoredProgramUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [TestInitialize] public void Setup() Test_AddVariable_Duplicate_ShouldNotStore() [TestMethod] public void Test_AddVariable_Duplicate_ShouldNotStore() Test_AddVariable_ShouldStoreVariable() [TestMethod] public void Test_AddVariable_ShouldStoreVariable() Test_EvaluateExpression_Invalid_ShouldThrowException() [TestMethod] public void Test_EvaluateExpression_Invalid_ShouldThrowException() Test_EvaluateExpression_ShouldReturnResult() [TestMethod] public void Test_EvaluateExpression_ShouldReturnResult() Test_InitializeProgram_ShouldSetDefaults() [TestMethod] public void Test_InitializeProgram_ShouldSetDefaults() Test_PopEmptyStack_ShouldThrowException() [TestMethod] public void Test_PopEmptyStack_ShouldThrowException() Test_PushPopConditionalCommands_ShouldHandleStack() [TestMethod] public void Test_PushPopConditionalCommands_ShouldHandleStack() Test_UpdateVariable_ShouldUpdateValue() [TestMethod] public void Test_UpdateVariable_ShouldUpdateValue()"
  },
  "api/ASE_Assignment_Test_Case.MyAppWriteToUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyAppWriteToUnitTests.html",
    "title": "Class MyAppWriteToUnitTests | ASE Project",
    "keywords": "Class MyAppWriteToUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit test class for testing the WriteText command functionality. [TestClass] public class MyAppWriteToUnitTests Inheritance object MyAppWriteToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParameterIsExactly100Characters() Tests the CheckParameters method to ensure no exception is thrown when the parameter is exactly 100 characters long. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParameterIsExactly100Characters() CheckParameters_ShouldNotThrow_WhenParameterIsValid() Tests the CheckParameters method to ensure no exception is thrown for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParameterIsValid() Constructor_ShouldInitialize_WithNullText() Tests whether the constructor initializes a WriteText instance when the text is null. [TestMethod] public void Constructor_ShouldInitialize_WithNullText() Constructor_ShouldInitialize_WithValidCanvasAndText() Tests whether the constructor initializes a WriteText instance with a valid Canvas and text. [TestMethod] public void Constructor_ShouldInitialize_WithValidCanvasAndText() TestInitialize() Initializes the test environment by setting up a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyCircleUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyCircleUnitTests.html",
    "title": "Class MyCircleUnitTests | ASE Project",
    "keywords": "Class MyCircleUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll [TestClass] public class MyCircleUnitTests Inheritance object MyCircleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyClearUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyClearUnitTests.html",
    "title": "Class MyClearUnitTests | ASE Project",
    "keywords": "Class MyClearUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll [TestClass] public class MyClearUnitTests Inheritance object MyClearUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldClearCanvas_WhenCanvasIsValid() [TestMethod] public void Execute_ShouldClearCanvas_WhenCanvasIsValid() Execute_ShouldHandleNullCanvas_Gracefully() [TestMethod] public void Execute_ShouldHandleNullCanvas_Gracefully() Execute_ShouldNotThrowException_WhenCanvasIsEmpty() [TestMethod] public void Execute_ShouldNotThrowException_WhenCanvasIsEmpty() TestInitialize() [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyDrawToUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyDrawToUnitTests.html",
    "title": "Class MyDrawToUnitTests | ASE Project",
    "keywords": "Class MyDrawToUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll [TestClass] public class MyDrawToUnitTests Inheritance object MyDrawToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() TestInitialize() [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyFillUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyFillUnitTests.html",
    "title": "Class MyFillUnitTests | ASE Project",
    "keywords": "Class MyFillUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll [TestClass] public class MyFillUnitTests Inheritance object MyFillUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldThrowCommandException_WhenMoreThanOneParameterProvided() [TestMethod] public void CheckParameters_ShouldThrowCommandException_WhenMoreThanOneParameterProvided() CheckParameters_ShouldThrowCommandException_WhenNoParametersProvided() [TestMethod] public void CheckParameters_ShouldThrowCommandException_WhenNoParametersProvided() CheckParameters_ShouldThrowCommandException_WhenParameterIsEmpty() [TestMethod] public void CheckParameters_ShouldThrowCommandException_WhenParameterIsEmpty() Constructor_ShouldInitialize_WhenTextIsValid() [TestMethod] public void Constructor_ShouldInitialize_WhenTextIsValid() Constructor_ShouldThrowException_WhenTextIsNull() [TestMethod] public void Constructor_ShouldThrowException_WhenTextIsNull() Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() TestInitialize() [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyMoveToUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyMoveToUnitTests.html",
    "title": "Class MyMoveToUnitTests | ASE Project",
    "keywords": "Class MyMoveToUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll [TestClass] public class MyMoveToUnitTests Inheritance object MyMoveToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() TestInitialize() [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyPenColourUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyPenColourUnitTests.html",
    "title": "Class MyPenColourUnitTests | ASE Project",
    "keywords": "Class MyPenColourUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll [TestClass] public class MyPenColourUnitTests Inheritance object MyPenColourUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyRectangleUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyRectangleUnitTests.html",
    "title": "Class MyRectangleUnitTests | ASE Project",
    "keywords": "Class MyRectangleUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll [TestClass] public class MyRectangleUnitTests Inheritance object MyRectangleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyResetsUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyResetsUnitTests.html",
    "title": "Class MyResetsUnitTests | ASE Project",
    "keywords": "Class MyResetsUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll [TestClass] public class MyResetsUnitTests Inheritance object MyResetsUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() [TestMethod] public void Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() TestInitialize() [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.MyStoredProgramUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyStoredProgramUnitTests.html",
    "title": "Class MyStoredProgramUnitTests | ASE Project",
    "keywords": "Class MyStoredProgramUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll [TestClass] public class MyStoredProgramUnitTests Inheritance object MyStoredProgramUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [TestInitialize] public void Setup() Test_AddVariable_Duplicate_ShouldNotStore() [TestMethod] public void Test_AddVariable_Duplicate_ShouldNotStore() Test_AddVariable_ShouldStoreVariable() [TestMethod] public void Test_AddVariable_ShouldStoreVariable() Test_EvaluateExpression_Invalid_ShouldThrowException() [TestMethod] public void Test_EvaluateExpression_Invalid_ShouldThrowException() Test_EvaluateExpression_ShouldReturnResult() [TestMethod] public void Test_EvaluateExpression_ShouldReturnResult() Test_InitializeProgram_ShouldSetDefaults() [TestMethod] public void Test_InitializeProgram_ShouldSetDefaults() Test_PopEmptyStack_ShouldThrowException() [TestMethod] public void Test_PopEmptyStack_ShouldThrowException() Test_PushPopConditionalCommands_ShouldHandleStack() [TestMethod] public void Test_PushPopConditionalCommands_ShouldHandleStack() Test_UpdateVariable_ShouldUpdateValue() [TestMethod] public void Test_UpdateVariable_ShouldUpdateValue()"
  },
  "api/ASE_Assignment_Test_Case.MyWriteToUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.MyWriteToUnitTests.html",
    "title": "Class MyWriteToUnitTests | ASE Project",
    "keywords": "Class MyWriteToUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit test class for testing the WriteText command functionality. [TestClass] public class MyWriteToUnitTests Inheritance object MyWriteToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParameterIsExactly100Characters() Tests the CheckParameters method to ensure no exception is thrown when the parameter is exactly 100 characters long. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParameterIsExactly100Characters() CheckParameters_ShouldNotThrow_WhenParameterIsValid() Tests the CheckParameters method to ensure no exception is thrown for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParameterIsValid() Constructor_ShouldInitialize_WithNullText() Tests whether the constructor initializes a WriteText instance when the text is null. [TestMethod] public void Constructor_ShouldInitialize_WithNullText() Constructor_ShouldInitialize_WithValidCanvasAndText() Tests whether the constructor initializes a WriteText instance with a valid Canvas and text. [TestMethod] public void Constructor_ShouldInitialize_WithValidCanvasAndText() TestInitialize() Initializes the test environment by setting up a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.ParserTest.html": {
    "href": "api/ASE_Assignment_Test_Case.ParserTest.html",
    "title": "Class ParserTest | ASE Project",
    "keywords": "Class ParserTest Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit test class for testing the parser functionality in the application. [TestClass] public class ParserTest Inheritance object ParserTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the test environment by initializing necessary objects. [TestInitialize] public void SetUp() TestParseCommand_ShouldReturnValidCommand_ForKnownCommand() Tests whether ParseCommand returns a valid ICommand object for a known command. [TestMethod] public void TestParseCommand_ShouldReturnValidCommand_ForKnownCommand() TestParseCommand_ShouldThrowFactoryException_ForUnknownVariable() Tests whether ParseCommand throws a FactoryException for an unknown variable assignment. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestParseCommand_ShouldThrowFactoryException_ForUnknownVariable() TestParseProgram_ShouldThrowArgumentException_ForEmptyProgram() Tests whether ParseProgram throws an ArgumentException for an empty program string. [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestParseProgram_ShouldThrowArgumentException_ForEmptyProgram()"
  },
  "api/ASE_Assignment_Test_Case.PenSizeUnitTests.html": {
    "href": "api/ASE_Assignment_Test_Case.PenSizeUnitTests.html",
    "title": "Class PenSizeUnitTests | ASE Project",
    "keywords": "Class PenSizeUnitTests Namespace ASE_Assignment_Test_Case Assembly ASE_Assignment_Test_Case.dll Unit test class for testing the PenSize command functionality. [TestClass] public class PenSizeUnitTests Inheritance object PenSizeUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests whether the CheckParameters method does not throw an exception for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests whether the PenSize constructor initializes properly when valid parameters are provided. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Execute_ShouldHandleBoundaryValue_Zero() Tests whether the Execute method handles a boundary value of zero for the pen size. [TestMethod] public void Execute_ShouldHandleBoundaryValue_Zero() TestInitialize() Sets up the test environment by initializing a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test_Case.html": {
    "href": "api/ASE_Assignment_Test_Case.html",
    "title": "Namespace ASE_Assignment_Test_Case | ASE Project",
    "keywords": "Namespace ASE_Assignment_Test_Case Classes CommandFactoryTest Unit tests for the StoredCommandFactory class. Ensures that the MakeCommand method correctly creates instances of commands and handles invalid inputs appropriately. CommandUnitTests GloabalCofigTest Unit tests for the GlobalConfig class. Ensures that the configuration properties are set and retrieved correctly. MyAppCanvasTest Unit tests for the MyAppCanvas class. Ensures that canvas operations and configurations work as expected. MyAppCircleUnitTests Unit tests for the MyAppCircle class. MyAppClearUnitTests Unit tests for the MyAppClear class. MyAppDrawToUnitTests Unit tests for the MyAppDrawTo command functionality. MyAppFillUnitTests Unit tests for the MyAppFill command functionality. MyAppMoveToUnitTests Unit tests for the MyAppMoveTo command functionality. MyAppParserTest Unit test class for testing the parser functionality in the application. MyAppPenColourUnitTests Unit tests for the MyAppPenColour command functionality. MyAppPenSizeUnitTests Unit test class for testing the PenSize command functionality. MyAppRectangleUnitTests Unit tests for the MyAppRectangle command functionality. MyAppResetsUnitTests Unit tests for the MyAppReset command functionality. MyAppStoredProgramUnitTests MyAppWriteToUnitTests Unit test class for testing the WriteText command functionality."
  },
  "api/ASE_Suyash_Silwal_77356849.AppConditionalCommand.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.AppConditionalCommand.html",
    "title": "Class AppConditionalCommand | ASE Project",
    "keywords": "Class AppConditionalCommand Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll public class AppConditionalCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand Implements ICommand Derived ApplicationCompoundCommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() public override void Execute() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Suyash_Silwal_77356849.AppFor.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.AppFor.html",
    "title": "Class AppFor | ASE Project",
    "keywords": "Class AppFor Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll public class AppFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For AppFor Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() public override void Execute() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Suyash_Silwal_77356849.ApplicationArray.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.ApplicationArray.html",
    "title": "Class ApplicationArray | ASE Project",
    "keywords": "Class ApplicationArray Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents an application array that supports operations like initialization, execution, and parameter checking. public class ApplicationArray : Evaluation, ICommand Inheritance object Command Evaluation ApplicationArray Implements ICommand Derived ApplicationPeek ApplicationPoke Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationArray() Default constructor for the ApplicationArray class. public ApplicationArray() Fields IntValue protected int IntValue Field Value int PEEK Flag indicating a peek operation. protected const bool PEEK = false Field Value bool POKE Flag indicating a poke operation. public const bool POKE = true Field Value bool RealValue protected double RealValue Field Value double columnCurrent protected int columnCurrent Field Value int columnExpression protected string columnExpression Field Value string columnsCount protected int columnsCount Field Value int intArray protected int[,] intArray Field Value int[,] peekValue protected string peekValue Field Value string pokeValue protected string pokeValue Field Value string realArray protected double[,] realArray Field Value double[,] rowCurrent protected int rowCurrent Field Value int rowExpression protected string rowExpression Field Value string rowsCount protected int rowsCount Field Value int type Specifies the type of array (e.g., \"int\", \"real\"). protected string type Field Value string Properties Columns Gets the number of columns in the array. protected int Columns { get; } Property Value int Rows Gets the number of rows in the array. protected int Rows { get; } Property Value int Methods ArrayRestrictions() Applies restrictions to the array. public void ArrayRestrictions() CheckParameters(string[]) Checks the parameters provided for the array. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Compile() Compiles the array definition and validates parameters. public override void Compile() Execute() Executes the array initialization. public override void Execute() GetIntArray(int, int) Gets an integer value from the array. public virtual int GetIntArray(int row, int col) Parameters row int The row index. col int The column index. Returns int The integer value at the specified position. GetRealArray(int, int) Gets a real (double) value from the array. public virtual double GetRealArray(int row, int col) Parameters row int The row index. col int The column index. Returns double The double value at the specified position. ProcessArrayParametersCompile(bool) Processes array parameters during compilation. protected virtual void ProcessArrayParametersCompile(bool isPokeOperation) Parameters isPokeOperation bool Indicates if the operation is a poke operation. ProcessArrayParametersExecute(bool) Processes array parameters during execution. protected virtual void ProcessArrayParametersExecute(bool isPokeOperation) Parameters isPokeOperation bool Indicates if the operation is a poke operation. ReduceRestrictionCounter() Reduces the restriction counter for array operations. protected void ReduceRestrictionCounter() SetIntArray(int, int, int) Sets an integer value in the array. public virtual void SetIntArray(int value, int row, int col) Parameters value int The value to set. row int The row index. col int The column index. SetRealArray(double, int, int) Sets a real (double) value in the array. public virtual void SetRealArray(double value, int row, int col) Parameters value double The value to set. row int The row index. col int The column index."
  },
  "api/ASE_Suyash_Silwal_77356849.ApplicationBoolean.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.ApplicationBoolean.html",
    "title": "Class ApplicationBoolean | ASE Project",
    "keywords": "Class ApplicationBoolean Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a boolean application that extends the BOOSE.Boolean class. public class ApplicationBoolean : Boolean, ICommand Inheritance object Command Evaluation Boolean ApplicationBoolean Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Defines restrictions for the ApplicationBoolean class. This method is intended to be overridden with specific restriction logic. public override void Restrictions()"
  },
  "api/ASE_Suyash_Silwal_77356849.ApplicationCast.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.ApplicationCast.html",
    "title": "Class ApplicationCast | ASE Project",
    "keywords": "Class ApplicationCast Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a casting operation between two variables within the BOOSE framework. This class supports casting an integer value to a real value and ensures appropriate checks. public class ApplicationCast : Command, ICommand Inheritance object Command ApplicationCast Implements ICommand Inherited Members Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters passed for the cast operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of parameters specifying the source and target variables. Exceptions CommandException Thrown if the number of parameters is not exactly two. Compile() Compiles the cast operation by validating the existence and compatibility of the source and target variables. public override void Compile() Exceptions CommandException Thrown if one or both variables do not exist, or if an invalid cast is attempted. Execute() Executes the cast operation, assigning the integer value from the source to the target real variable. public override void Execute() Exceptions InvalidCastException Thrown if the source or target command cannot be cast to their respective types."
  },
  "api/ASE_Suyash_Silwal_77356849.ApplicationCompoundCommand.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.ApplicationCompoundCommand.html",
    "title": "Class ApplicationCompoundCommand | ASE Project",
    "keywords": "Class ApplicationCompoundCommand Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll public class ApplicationCompoundCommand : AppConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand Implements ICommand Derived ApplicationElse ApplicationEnd ApplicationIf ApplicationWhile Inherited Members AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationCompoundCommand() public ApplicationCompoundCommand() Properties CorrespondingCommand public ConditionalCommand CorrespondingCommand { get; set; } Property Value ConditionalCommand Methods CheckParameters(string[]) public override void CheckParameters(string[] parameters) Parameters parameters string[] Compile() public override void Compile() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Suyash_Silwal_77356849.ApplicationElse.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.ApplicationElse.html",
    "title": "Class ApplicationElse | ASE Project",
    "keywords": "Class ApplicationElse Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents an Else command in the application. This class handles the compilation, execution, and validation of an Else command. public class ApplicationElse : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand ApplicationElse Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationElse() Initializes a new instance of the ApplicationElse class. public ApplicationElse() Properties CorrespondingEnd Gets or sets the corresponding End command associated with this Else command. public End CorrespondingEnd { get; set; } Property Value End Methods CheckParameters(string[]) Validates the parameters for the Else command. public override void CheckParameters(string[] parameters) Parameters parameters string[] The array of parameters to check. Exceptions CommandException Thrown when the parameters are invalid or do not match the expected \"else\". Compile() Compiles the Else command by setting up references and line numbers. public override void Compile() Exceptions InvalidOperationException Thrown when the corresponding command stack is empty. Execute() Executes the Else command. Adjusts the program counter if the condition of the corresponding command is true. public override void Execute()"
  },
  "api/ASE_Suyash_Silwal_77356849.ApplicationEnd.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.ApplicationEnd.html",
    "title": "Class ApplicationEnd | ASE Project",
    "keywords": "Class ApplicationEnd Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents the End command in the application. Handles the compilation and execution of the End command, which marks the termination of control flow structures such as If, While, and For. public class ApplicationEnd : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand ApplicationEnd Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationEnd() Initializes a new instance of the ApplicationEnd class. public ApplicationEnd() Methods Compile() Compiles the End command by associating it with its corresponding control structure. public override void Compile() Exceptions CommandException Thrown when the syntax is invalid or the expected corresponding structure is not found. Execute() Executes the End command. Adjusts the program counter or loop control variables as necessary. public override void Execute() Exceptions CommandException Thrown when there are issues with loop termination or variable existence."
  },
  "api/ASE_Suyash_Silwal_77356849.ApplicationIf.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.ApplicationIf.html",
    "title": "Class ApplicationIf | ASE Project",
    "keywords": "Class ApplicationIf Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents the If command in the application. This class handles conditional logic and its associated functionalities. public class ApplicationIf : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand ApplicationIf Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationIf() Initializes a new instance of the ApplicationIf class. public ApplicationIf() Methods ReduceRestrictions() Reduces restrictions or constraints associated with the If command. This method can be overridden in derived classes to implement specific logic. protected void ReduceRestrictions()"
  },
  "api/ASE_Suyash_Silwal_77356849.ApplicationInt.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.ApplicationInt.html",
    "title": "Class ApplicationInt | ASE Project",
    "keywords": "Class ApplicationInt Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents an integer-based command in the application. This class extends the BOOSE.Int class and implements its specific restrictions. public class ApplicationInt : Int, ICommand Inheritance object Command Evaluation Int ApplicationInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Defines the restrictions for the ApplicationInt command. This method is intended to be overridden with specific logic for restrictions. public override void Restrictions()"
  },
  "api/ASE_Suyash_Silwal_77356849.ApplicationMethod.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.ApplicationMethod.html",
    "title": "Class ApplicationMethod | ASE Project",
    "keywords": "Class ApplicationMethod Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll public class ApplicationMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method ApplicationMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationMethod() public ApplicationMethod() Methods ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int ResetOrDecreaseMethodCount(int) public void ResetOrDecreaseMethodCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Suyash_Silwal_77356849.ApplicationPeek.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.ApplicationPeek.html",
    "title": "Class ApplicationPeek | ASE Project",
    "keywords": "Class ApplicationPeek Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents the Peek operation on an array in the application. This class extends ApplicationArray to perform Peek operations, which retrieves a value from an array without modifying the array. public class ApplicationPeek : ApplicationArray, ICommand Inheritance object Command Evaluation ApplicationArray ApplicationPeek Implements ICommand Inherited Members ApplicationArray.PEEK ApplicationArray.POKE ApplicationArray.type ApplicationArray.IntValue ApplicationArray.RealValue ApplicationArray.rowsCount ApplicationArray.columnsCount ApplicationArray.intArray ApplicationArray.realArray ApplicationArray.pokeValue ApplicationArray.peekValue ApplicationArray.rowExpression ApplicationArray.columnExpression ApplicationArray.rowCurrent ApplicationArray.columnCurrent ApplicationArray.Rows ApplicationArray.Columns ApplicationArray.ArrayRestrictions() ApplicationArray.ReduceRestrictionCounter() ApplicationArray.ProcessArrayParametersCompile(bool) ApplicationArray.ProcessArrayParametersExecute(bool) ApplicationArray.SetIntArray(int, int, int) ApplicationArray.SetRealArray(double, int, int) ApplicationArray.GetIntArray(int, int) ApplicationArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationPeek() Initializes a new instance of the ApplicationPeek class. public ApplicationPeek() Methods CheckParameters(string[]) Validates the parameters for the Peek operation. Since parameter validation for Peek is not implemented, this method throws a NotImplementedException. public override void CheckParameters(string[] parameters) Parameters parameters string[] The array of parameters to validate. Exceptions NotImplementedException Thrown when attempting to validate parameters for the Peek operation, which is not yet implemented. Compile() Compiles the Peek operation by processing array parameters. This method prepares the array for the Peek operation without performing any modification (isPokeOperation is false). public override void Compile() Execute() Executes the Peek operation. Retrieves the value from the array based on the type and updates the program's variable accordingly. public override void Execute() Exceptions CommandException Thrown if the array type is unsupported for the Peek operation."
  },
  "api/ASE_Suyash_Silwal_77356849.ApplicationPoke.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.ApplicationPoke.html",
    "title": "Class ApplicationPoke | ASE Project",
    "keywords": "Class ApplicationPoke Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents the Poke operation on an array in the application. This class extends ApplicationArray to perform Poke operations, which modify an element in the array. public class ApplicationPoke : ApplicationArray, ICommand Inheritance object Command Evaluation ApplicationArray ApplicationPoke Implements ICommand Inherited Members ApplicationArray.PEEK ApplicationArray.POKE ApplicationArray.type ApplicationArray.IntValue ApplicationArray.RealValue ApplicationArray.rowsCount ApplicationArray.columnsCount ApplicationArray.intArray ApplicationArray.realArray ApplicationArray.pokeValue ApplicationArray.peekValue ApplicationArray.rowExpression ApplicationArray.columnExpression ApplicationArray.rowCurrent ApplicationArray.columnCurrent ApplicationArray.Rows ApplicationArray.Columns ApplicationArray.ArrayRestrictions() ApplicationArray.ReduceRestrictionCounter() ApplicationArray.ProcessArrayParametersCompile(bool) ApplicationArray.ProcessArrayParametersExecute(bool) ApplicationArray.SetIntArray(int, int, int) ApplicationArray.SetRealArray(double, int, int) ApplicationArray.GetIntArray(int, int) ApplicationArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationPoke() Initializes a new instance of the ApplicationPoke class. public ApplicationPoke() Methods CheckParameters(string[]) Validates the parameters for the Poke operation. Ensures that the correct number of parameters (2 or 3) is provided for the operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] The array of parameters to validate. Exceptions CommandException Thrown when an invalid number of parameters is provided for the Poke operation. Compile() Compiles the Poke operation by processing array parameters. This method prepares the array for the Poke operation, which modifies an element (isPokeOperation is true). public override void Compile() Execute() Executes the Poke operation. Modifies an element in the array based on the parameters provided. public override void Execute() Set(StoredProgram, string) Sets the program and parameter list for the Poke operation. This method calls the base class's Set method to initialize the program and parameters. public override void Set(StoredProgram program, string paramsList) Parameters program StoredProgram The program instance to set. paramsList string The list of parameters for the operation."
  },
  "api/ASE_Suyash_Silwal_77356849.ApplicationReal.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.ApplicationReal.html",
    "title": "Class ApplicationReal | ASE Project",
    "keywords": "Class ApplicationReal Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a real-number-based command in the application. This class extends BOOSE.Real and implements its specific restrictions. public class ApplicationReal : Real, ICommand Inheritance object Command Evaluation Real ApplicationReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Defines the restrictions for the ApplicationReal command. This method can be overridden in derived classes to implement specific logic for restrictions. public override void Restrictions()"
  },
  "api/ASE_Suyash_Silwal_77356849.ApplicationWhile.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.ApplicationWhile.html",
    "title": "Class ApplicationWhile | ASE Project",
    "keywords": "Class ApplicationWhile Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents the While loop command in the application. This class handles the logic and functionality for While loops. public class ApplicationWhile : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand ApplicationWhile Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationWhile() Initializes a new instance of the ApplicationWhile class. public ApplicationWhile() Methods ReduceRestrictions() Reduces restrictions or constraints associated with the While command. This method can be overridden in derived classes to implement specific logic for restriction reduction. protected void ReduceRestrictions()"
  },
  "api/ASE_Suyash_Silwal_77356849.Clear.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.Clear.html",
    "title": "Class Clear | ASE Project",
    "keywords": "Class Clear Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a command to clear all elements from the canvas. public class Clear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Clear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Clear() Initializes a new instance of the Clear class. public Clear() Clear(Canvas) Initializes a new instance of the Clear class with the specified canvas. public Clear(Canvas c) Parameters c Canvas The canvas to clear. Methods CheckParameters(string[]) Validates the parameters for the clear command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks No parameters are required for this command, so no validation is performed. Execute() Executes the clear command, removing all elements from the canvas. public override void Execute()"
  },
  "api/ASE_Suyash_Silwal_77356849.Form1.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.Form1.html",
    "title": "Class Form1 | ASE Project",
    "keywords": "Class Form1 Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Suyash_Silwal_77356849.GlobalConfig.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.GlobalConfig.html",
    "title": "Class GlobalConfig | ASE Project",
    "keywords": "Class GlobalConfig Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a global configuration for the application. public class GlobalConfig Inheritance object GlobalConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MaxX Represents the maximum width (X-axis limit) of the drawing canvas or application space. public static int MaxX { get; set; } Property Value int Remarks Defaults to 640. This value can be adjusted to change the horizontal limit of the canvas. MaxY Represents the maximum height (Y-axis limit) of the drawing canvas or application space. public static int MaxY { get; set; } Property Value int Remarks Defaults to 480. This value can be adjusted to change the vertical limit of the canvas. PenSize Specifies the size of the pen used for drawing. public static int PenSize { get; set; } Property Value int Remarks Defaults to 1. This value determines the thickness of lines drawn on the canvas. filedStatus Gets or sets the status of the file operation. public static bool filedStatus { get; set; } Property Value bool Remarks Indicates whether the file operation status is active or inactive. Default value is false."
  },
  "api/ASE_Suyash_Silwal_77356849.MyApp.ApplicationFor.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyApp.ApplicationFor.html",
    "title": "Class ApplicationFor | ASE Project",
    "keywords": "Class ApplicationFor Namespace ASE_Suyash_Silwal_77356849.MyApp Assembly ASE_Suyash_Silwal_77356849.dll public class ApplicationFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For ApplicationFor Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() public override void Execute() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Suyash_Silwal_77356849.MyApp.CommandParser.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyApp.CommandParser.html",
    "title": "Class CommandParser | ASE Project",
    "keywords": "Class CommandParser Namespace ASE_Suyash_Silwal_77356849.MyApp Assembly ASE_Suyash_Silwal_77356849.dll Represents a parser for interpreting and executing commands within a program. public class CommandParser : IParser Inheritance object CommandParser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandParser(CommandFactory, StoredProgram) Initializes a new instance of the CommandParser class. public CommandParser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory The factory used to create commands. program StoredProgram The stored program to parse commands against. Methods ParseCommand(string) Parses a single line of input into an BOOSE.ICommand. public virtual ICommand ParseCommand(string line) Parameters line string The line of input to parse. Returns ICommand The parsed command, or null if the line is a comment. Exceptions ParserException Thrown when the variable does not exist or has an unknown type. ParseProgram(string) Parses an entire program, processing each line as a command. public virtual void ParseProgram(string program) Parameters program string The program code to parse. Exceptions BOOSEException Thrown for syntax or execution errors in the program."
  },
  "api/ASE_Suyash_Silwal_77356849.MyApp.DrawingCanvas.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyApp.DrawingCanvas.html",
    "title": "Class DrawingCanvas | ASE Project",
    "keywords": "Class DrawingCanvas Namespace ASE_Suyash_Silwal_77356849.MyApp Assembly ASE_Suyash_Silwal_77356849.dll Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. public class DrawingCanvas : ICanvas Inheritance object DrawingCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides methods for drawing various shapes (lines, circles, rectangles, triangles) and text on a canvas represented by a bitmap. It supports operations such as setting the pen color and size, moving the pen to a new position, and resetting the canvas to its initial state. The canvas is defined by a width (XSIDE) and height (YSIDE), which are used to constrain drawing operations within the canvas boundaries. The class utilizes the Graphics object to perform rendering on the canvas. Constructors DrawingCanvas() Initializes a new instance of the DrawingCanvas class with default canvas size. public DrawingCanvas() Remarks This constructor sets the canvas size to the default values defined by the constants XSIDE and YSIDE. It also initializes the pen size to 1 and sets the pen color to black (RGB: 0, 0, 0). Exceptions CanvasException Thrown if the canvas size cannot be set properly or if invalid values are provided for pen size or color. Properties Filled public bool Filled { get; set; } Property Value bool PenColour Gets or sets the pen color for the next drawing operation. public object PenColour { get; set; } Property Value object Remarks This property allows you to retrieve or modify the current pen color used for drawing operations. The color is represented as a Color object, and it determines the color of lines, shapes, and other drawn elements on the canvas. Exceptions InvalidCastException Thrown if the provided value for the pen color is not a valid Color object. PenSize Gets or sets the pen size, which determines the thickness of the lines drawn. public int PenSize { get; set; } Property Value int The pen size, which is a positive integer. It determines how thick the lines will appear on the canvas. A value greater than zero is required. If the value is zero or negative, an exception will be thrown. Exceptions CanvasException Thrown when the pen size is set to a value less than or equal to zero. XSIDE The width of the canvas. public int XSIDE { get; set; } Property Value int Remarks This defines the horizontal dimension of the canvas. It is used to validate the X positions during drawing operations. The default value is 640 pixels. Xpos Gets or sets the X position for the next drawing operation. public int Xpos { get; set; } Property Value int Remarks This property controls the X coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). YSIDE The height of the canvas. public int YSIDE { get; set; } Property Value int Remarks This defines the vertical dimension of the canvas. It is used to validate the Y positions during drawing operations. The default value is 480 pixels. Ypos Gets or sets the Y position for the next drawing operation. public int Ypos { get; set; } Property Value int Remarks This property controls the Y coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). Methods Circle(int, bool) Attempts to draw a circle at the current pen position, either filled or outlined, depending on the specified parameter. Ensures the radius is valid and checks if the circle fits within the canvas boundaries. If the radius is invalid or the circle exceeds the canvas size, a warning is logged, and drawing is skipped. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. Must be a positive integer greater than zero. If the radius is invalid, the circle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the circle should be filled or outlined: true: Draws a filled circle. false: Draws an outlined circle. Examples The following example demonstrates how to draw a filled circle with a radius of 50: Circle(50, true); Remarks The method ensures that drawing operations do not disrupt the program's flow. If the circle cannot be drawn due to invalid input or canvas boundary constraints, the method logs a warning and continues execution. Exceptions CanvasException This exception is caught internally to prevent program termination. It is used to log errors for invalid radius values or when the circle exceeds canvas dimensions. Clear() Clears the canvas by filling it with a default background color. public void Clear() DrawTo(int, int) Draws a line from the current pen position to a specified endpoint on the canvas. public void DrawTo(int x, int y) Parameters x int The X coordinate of the endpoint of the line. This value represents the position along the horizontal axis. y int The Y coordinate of the endpoint of the line. This value represents the position along the vertical axis. Examples The following example demonstrates how to draw a line from the current pen position to the point (100, 50): DrawTo(100, 50); Remarks The method updates the pen's current position to the specified endpoint after the line is drawn. Subsequent drawing operations will use the new position as the starting point. If the line cannot be drawn due to an uninitialized graphics context, the method logs a warning but does not interrupt execution. Exceptions CanvasException Thrown if the graphics context is not initialized or if the specified coordinates are outside the canvas boundaries. GetGraphics() Returns the current Graphics object used for drawing on the canvas. public Graphics GetGraphics() Returns Graphics The Graphics object associated with the current canvas. Examples The following example demonstrates how to retrieve the current Graphics object and handle any potential exceptions if the graphics object is not initialized: try { Graphics currentGraphics = GetGraphics(); // Use currentGraphics for drawing operations, if not null } catch (CanvasException ex) { Console.WriteLine($\"Error: {ex.Message}\"); // Handle the error (e.g., log it) } Remarks This method allows access to the internal Graphics object used for drawing on the canvas. If the graphics object has not been initialized (i.e., it is null), a BOOSE.CanvasException is thrown, indicating that the drawing cannot proceed. Exceptions CanvasException Thrown if the graphics object is not initialized or is null. This exception is thrown when there is an attempt to retrieve the Graphics object before it is set. MoveTo(int, int) Moves the drawing cursor to a specified position on the canvas without drawing any lines. public void MoveTo(int x, int y) Parameters x int The X coordinate to move the cursor to. Represents the horizontal position on the canvas. Must be within the canvas boundaries. y int The Y coordinate to move the cursor to. Represents the vertical position on the canvas. Must be within the canvas boundaries. Examples The following example demonstrates how to move the pen to position (50, 100) without drawing: MoveTo(50, 100); Remarks This method updates the current position of the pen to the specified coordinates (x, y) without performing any drawing operations. It ensures that subsequent drawing operations begin from the new cursor position. If the specified coordinates are outside the canvas boundaries, the position is not updated, and a warning is logged. Exceptions CanvasException Thrown if the specified coordinates are outside the canvas boundaries defined by XSIDE and YSIDE. Rect(int, int, bool) Draws a rectangle at the current cursor position with the specified dimensions and style (filled or outline). public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. height int The height of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the rectangle should be filled or outlined: true: Draws a filled rectangle. false: Draws an outlined rectangle. Examples The following example demonstrates how to draw a filled rectangle with a width of 100 and height of 50: Rect(100, 50, true); Remarks The rectangle is drawn starting from the current cursor position (xPos, yPos). If the rectangle's dimensions are invalid or it exceeds the canvas boundaries, it will not be drawn, and a warning will be logged. This ensures the program continues execution without interruption. Exceptions CanvasException Thrown if the specified rectangle dimensions are invalid or if the rectangle exceeds canvas boundaries. Reset() Resets the canvas to its initial state by resetting the drawing cursor position to the top-left corner. public void Reset() Examples The following example demonstrates how to reset the canvas and start fresh with drawing: Reset(); // Resets the drawing cursor to the top-left corner Remarks This method resets the drawing cursor (pen position) to the initial position at (0, 0). Any previous drawing operations will not be affected, but the next drawing operations will begin from the top-left corner of the canvas. Exceptions CanvasException Thrown if there is an issue with resetting the canvas. For example, if the canvas is in an invalid state or has not been properly initialized, an exception could be thrown. Set(int, int) Sets the canvas size and initializes the drawing surface. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas, in pixels. ysize int The height of the canvas, in pixels. Remarks This method initializes the canvas with the specified width and height. It also sets the starting position of the drawing cursor (xPos, yPos) to the top-left corner (0, 0). After setting the canvas size, it creates a new Bitmap object for drawing and a corresponding Graphics object. Additionally, it clears the canvas to prepare for drawing. Exceptions CanvasException Thrown if the width or height of the canvas is invalid (e.g., negative or zero), or if there is an error during the initialization of the drawing surface. SetCanvas(Bitmap, Graphics) Sets the canvas by assigning the provided Bitmap and Graphics objects for drawing operations. public void SetCanvas(Bitmap newBitmap, Graphics newGraphics) Parameters newBitmap Bitmap The Bitmap object to be used as the canvas surface. This object holds the pixel data for the canvas. newGraphics Graphics The Graphics object to be used for rendering on the canvas. This object provides drawing capabilities like shapes, text, and images. Examples The following example demonstrates how to initialize a canvas with a 500x500 Bitmap: Bitmap bitmap = new Bitmap(500, 500); Graphics graphics = Graphics.FromImage(bitmap); SetCanvas(bitmap, graphics); Remarks This method initializes or reinitializes the internal canvas by setting the Bitmap and Graphics objects. After setting the canvas, it clears the drawing surface with a white background to provide a fresh start. If you need a specific background color, you can modify the method to accept a color parameter or change the default behavior. Exceptions CanvasException Thrown if either newBitmap or newGraphics is null. SetColour(int, int, int) Sets the pen color using specified RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component of the color, ranging from 0 to 255. green int The green component of the color, ranging from 0 to 255. blue int The blue component of the color, ranging from 0 to 255. Examples The following example demonstrates how to set the pen color to blue: SetColour(0, 0, 255); // Sets the pen color to pure blue Remarks This method allows precise control of the pen's color by specifying the intensity of red, green, and blue components. If an invalid value is provided, an exception is thrown. The pen is updated with the new color and retains the existing pen size. Exceptions CanvasException Thrown when any of the RGB components are outside the valid range of 0 to 255. Tri(int, int) Draws a triangle within the specified bounding rectangle, ensuring it fits within the canvas boundaries. public void Tri(int width, int height) Parameters width int The width of the bounding rectangle, which defines the base of the triangle. height int The height of the bounding rectangle, which defines the height of the triangle. Examples The following example demonstrates how to draw a triangle with width 100 and height 50: Tri(100, 50); // Draws a triangle with base 100 and height 50 Remarks The method validates the triangle's width and height to ensure they are positive. It then checks if the triangle's bounding points fit within the canvas boundaries. If any point exceeds the canvas size, a CanvasException is thrown. Exceptions CanvasException Thrown if the triangle dimensions are invalid, exceed canvas boundaries, or are non-positive. WriteText(string) Draws the specified text at the current cursor position on the canvas. public void WriteText(string text) Parameters text string The text to be drawn on the canvas. Examples The following example demonstrates how to draw text at the current position: WriteText(\"Hello, Canvas!\"); // Draws the text \"Hello, Canvas!\" at the current cursor position Remarks The method checks whether the input text is valid (not null, empty, or whitespace). If the text exceeds the canvas boundaries, a BOOSE.CanvasException is thrown. The method also ensures the graphics object is initialized before attempting to draw the text. Exceptions CanvasException Thrown if the text is null, empty, or exceeds canvas boundaries. It is also thrown if the graphics object is not initialized. getBitmap() Returns the Bitmap object representing the current drawing on the canvas. public object getBitmap() Returns object The Bitmap object associated with the current canvas. This object contains the pixel data for the current drawing and can be used to save or manipulate the canvas image. Remarks The Bitmap object returned by this method reflects the current state of the canvas, including any drawings made with the pen. If no drawing has been done, it will return an empty or unmodified bitmap. Exceptions CanvasException Thrown if the Bitmap object has not been initialized or there is an issue with accessing it."
  },
  "api/ASE_Suyash_Silwal_77356849.MyApp.MyAppPraser.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyApp.MyAppPraser.html",
    "title": "Class MyAppPraser | ASE Project",
    "keywords": "Class MyAppPraser Namespace ASE_Suyash_Silwal_77356849.MyApp Assembly ASE_Suyash_Silwal_77356849.dll Represents a parser for interpreting and executing commands within a program. public class MyAppPraser : IParser Inheritance object MyAppPraser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyAppPraser() Initializes a new instance of the AppPraser class. public MyAppPraser() MyAppPraser(ICommandFactory, StoredProgram) Initializes a new instance of the AppPraser class with the specified command factory and stored program. public MyAppPraser(ICommandFactory commandFactory, StoredProgram storedProgram) Parameters commandFactory ICommandFactory Factory for creating commands. storedProgram StoredProgram The program to store parsed commands. Exceptions ArgumentNullException Thrown if commandFactory or storedProgram is null. Methods ParseCommand(string) Parses a single line of input into a command. public ICommand ParseCommand(string line) Parameters line string The line of input to parse. Returns ICommand The parsed command, or null if the line is empty or a comment. Exceptions ParserException Thrown when parsing fails due to an unknown variable or unsupported type. ParseProgram(string) Parses an entire program from a string input. public void ParseProgram(string program) Parameters program string The program to parse. Exceptions ArgumentException Thrown if the program is null or empty."
  },
  "api/ASE_Suyash_Silwal_77356849.MyApp.MyCommandFactory.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyApp.MyCommandFactory.html",
    "title": "Class MyCommandFactory | ASE Project",
    "keywords": "Class MyCommandFactory Namespace ASE_Suyash_Silwal_77356849.MyApp Assembly ASE_Suyash_Silwal_77356849.dll Factory class that creates commands based on the provided string input. public class MyCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory MyCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyCommandFactory() Initializes a new instance of the MyCommandFactory class. public MyCommandFactory() Methods MakeCommand(string) Creates a specific command based on the given command string. public override ICommand MakeCommand(string command) Parameters command string The command string to create an ICommand instance for. Returns ICommand An instance of BOOSE.ICommand corresponding to the provided command. Exceptions FactoryException Thrown when an invalid command is provided."
  },
  "api/ASE_Suyash_Silwal_77356849.MyApp.StoredCommandFactory.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyApp.StoredCommandFactory.html",
    "title": "Class StoredCommandFactory | ASE Project",
    "keywords": "Class StoredCommandFactory Namespace ASE_Suyash_Silwal_77356849.MyApp Assembly ASE_Suyash_Silwal_77356849.dll Factory class that creates commands based on the provided string input. public class StoredCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory StoredCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StoredCommandFactory() Initializes a new instance of the StoredCommandFactory class. public StoredCommandFactory() Methods MakeCommand(string) Creates a specific command based on the given command string. public override ICommand MakeCommand(string command) Parameters command string The command string to create an BOOSE.ICommand instance for. Returns ICommand An instance of BOOSE.ICommand corresponding to the provided command string. Exceptions FactoryException Thrown when an invalid command is provided."
  },
  "api/ASE_Suyash_Silwal_77356849.MyApp.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyApp.html",
    "title": "Namespace ASE_Suyash_Silwal_77356849.MyApp | ASE Project",
    "keywords": "Namespace ASE_Suyash_Silwal_77356849.MyApp Classes ApplicationFor CommandParser Represents a parser for interpreting and executing commands within a program. DrawingCanvas Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. StoredCommandFactory Factory class that creates commands based on the provided string input."
  },
  "api/ASE_Suyash_Silwal_77356849.MyAppCircle.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyAppCircle.html",
    "title": "Class MyAppCircle | ASE Project",
    "keywords": "Class MyAppCircle Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a command to draw a circle on a canvas. public class MyAppCircle : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyAppCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyAppCircle() Initializes a new instance of the MyAppCircle class. public MyAppCircle() MyAppCircle(Canvas, int) Initializes a new instance of the MyAppCircle class with a specified canvas and radius. public MyAppCircle(Canvas canvas, int radius) Parameters canvas Canvas The canvas on which the circle will be drawn. radius int The radius of the circle. Methods CheckParameters(string[]) Validates the parameters for the circle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks This method ensures that the radius parameter is valid before executing the circle command. It logs exceptions using WriteLine(object) for debugging purposes. Exceptions CommandException Thrown when: The number of parameters is not exactly one. The provided radius value is not a positive integer. Execute() Executes the command to draw a circle on the canvas. public override void Execute() Remarks The method validates the radius value and ensures it does not exceed the maximum allowable value of 2000. If the radius is invalid or an error occurs, it logs the error details using WriteLine(object). Exceptions RestrictionException Thrown if the radius exceeds the allowable limit of 2000."
  },
  "api/ASE_Suyash_Silwal_77356849.MyAppClear.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyAppClear.html",
    "title": "Class MyAppClear | ASE Project",
    "keywords": "Class MyAppClear Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a command to clear all elements from the canvas. public class MyAppClear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyAppClear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyAppClear() Initializes a new instance of the MyAppClear class. public MyAppClear() MyAppClear(Canvas) Initializes a new instance of the MyAppClear class with the specified canvas. public MyAppClear(Canvas c) Parameters c Canvas The canvas to clear. Methods CheckParameters(string[]) Validates the parameters for the clear command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks No parameters are required for this command, so no validation is performed. Execute() Executes the clear command, removing all elements from the canvas. public override void Execute()"
  },
  "api/ASE_Suyash_Silwal_77356849.MyAppDrawTo.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyAppDrawTo.html",
    "title": "Class MyAppDrawTo | ASE Project",
    "keywords": "Class MyAppDrawTo Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a command to draw a line from the current position to a specified coordinate on the canvas. public class MyAppDrawTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters MyAppDrawTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyAppDrawTo() Initializes a new instance of the MyAppDrawTo class. public MyAppDrawTo() MyAppDrawTo(Canvas, int, int) Initializes a new instance of the MyAppDrawTo class with the specified canvas and coordinates. public MyAppDrawTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas to draw on. x int The x-coordinate to draw to. y int The y-coordinate to draw to. Exceptions RestrictionException Thrown when coordinates are negative. Methods CheckParameters(string[]) Validates the parameters for the draw-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks Ensures that the provided coordinates are valid before the draw-to command is executed. Logs validation errors for debugging purposes. Exceptions CommandException Thrown when: The number of parameters is not exactly two. The x or y coordinate is not a non-negative integer. Execute() Executes the draw-to command, drawing a line to the specified coordinates on the canvas. public override void Execute() Remarks Validates the coordinates before drawing. If coordinates are negative, or an unexpected error occurs, it logs appropriate debug messages. Exceptions RestrictionException Thrown when the coordinates are negative."
  },
  "api/ASE_Suyash_Silwal_77356849.MyAppFill.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyAppFill.html",
    "title": "Class MyAppFill | ASE Project",
    "keywords": "Class MyAppFill Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll A command class that fills a shape on the canvas based on the given text. public class MyAppFill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyAppFill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyAppFill() Initializes a new instance of the MyAppFill class. public MyAppFill() MyAppFill(Canvas, string) Initializes a new instance of the MyAppFill class with a canvas and text. public MyAppFill(Canvas c, string text) Parameters c Canvas The canvas to apply the fill command. text string The text to determine the fill state. Exceptions ArgumentNullException Thrown if text is null. Methods CheckParameters(string[]) Checks if the parameters passed to the command are valid. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown if the parameters are invalid. Execute() Executes the fill command by setting the filled state of the shape. public override void Execute() SetFilled(string) Sets the filled state of the shape based on the provided string. public void SetFilled(string isFilledStr) Parameters isFilledStr string A string value (\"true\" or \"false\") to set whether the shape is filled. Exceptions CommandException Thrown if the string value is not \"true\" or \"false\"."
  },
  "api/ASE_Suyash_Silwal_77356849.MyAppMoveTo.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyAppMoveTo.html",
    "title": "Class MyAppMoveTo | ASE Project",
    "keywords": "Class MyAppMoveTo Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a command to move a shape to the specified coordinates on the canvas. public class MyAppMoveTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters MyAppMoveTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyAppMoveTo() Initializes a new instance of the MyAppMoveTo class. public MyAppMoveTo() MyAppMoveTo(Canvas, int, int) Initializes a new instance of the MyAppMoveTo class with specified canvas and coordinates. public MyAppMoveTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas where the move operation will be applied. x int The x-coordinate to move to. y int The y-coordinate to move to. Exceptions RestrictionException Thrown if the coordinates exceed 2000. Methods CheckParameters(string[]) Validates the parameters for the move-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Remarks Ensures that the parameters are valid before the move-to command is executed. Logs validation errors for debugging purposes. Exceptions CommandException Thrown if: The parameter list does not contain exactly two elements. The x or y coordinate is not a valid non-negative integer. Execute() Executes the move command to reposition the shape to the specified coordinates. public override void Execute() Remarks This method validates the coordinates to ensure they do not exceed the allowed range. If validation fails, an appropriate debug message is logged. Exceptions RestrictionException Thrown if the coordinates exceed 2000."
  },
  "api/ASE_Suyash_Silwal_77356849.MyAppPenColour.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyAppPenColour.html",
    "title": "Class MyAppPenColour | ASE Project",
    "keywords": "Class MyAppPenColour Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a command to set the pen color on a canvas. public class MyAppPenColour : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters MyAppPenColour Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyAppPenColour() Initializes a new instance of the MyAppPenColour class. public MyAppPenColour() MyAppPenColour(Canvas, int, int, int) Initializes a new instance of the MyAppPenColour class with specified canvas and RGB values. public MyAppPenColour(Canvas canvas, int r, int g, int b) Parameters canvas Canvas The canvas where the pen color will be set. r int The red component of the color (0-255). g int The green component of the color (0-255). b int The blue component of the color (0-255). Exceptions RestrictionException Thrown when any RGB value is out of the range 0-255. Methods CheckParameters(string[]) Validates the parameters for the pen color command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks Ensures that all RGB values are within the valid range and are correctly formatted as integers. Logs validation errors for debugging purposes. Exceptions CommandException Thrown when: The parameter list does not contain exactly three elements. Any RGB value is not an integer or is outside the range 0-255. Execute() Executes the command to set the pen color on the canvas. public override void Execute() Remarks Validates the RGB values to ensure they fall within the range 0-255 before setting the color. If validation fails, debug messages are logged."
  },
  "api/ASE_Suyash_Silwal_77356849.MyAppPenSize.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyAppPenSize.html",
    "title": "Class MyAppPenSize | ASE Project",
    "keywords": "Class MyAppPenSize Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll public class MyAppPenSize : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyAppPenSize Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyAppPenSize() public MyAppPenSize() MyAppPenSize(Canvas, int) public MyAppPenSize(Canvas c, int pensize) Parameters c Canvas pensize int Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute() SetPenSize(int) public void SetPenSize(int penSize) Parameters penSize int"
  },
  "api/ASE_Suyash_Silwal_77356849.MyAppRectangle.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyAppRectangle.html",
    "title": "Class MyAppRectangle | ASE Project",
    "keywords": "Class MyAppRectangle Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a command to draw a rectangle on a canvas. public class MyAppRectangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters MyAppRectangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyAppRectangle() Initializes a new instance of the MyAppRectangle class. public MyAppRectangle() MyAppRectangle(Canvas, int, int) Initializes a new instance of the MyAppRectangle class with the specified canvas, width, and height. public MyAppRectangle(Canvas canvas, int width, int height) Parameters canvas Canvas The canvas on which to draw the rectangle. width int The width of the rectangle (positive integer). height int The height of the rectangle (positive integer). Exceptions RestrictionException Thrown when width or height exceeds 2000. Methods CheckParameters(string[]) Validates the parameters for the rectangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks Ensures that the width and height are positive integers and valid dimensions for a rectangle. Logs validation errors for debugging purposes. Exceptions CommandException Thrown when: The parameter list does not contain exactly two elements. Width or height is not a positive integer. Execute() Executes the rectangle drawing command. public override void Execute() Remarks Extracts the width and height from the base parameters, validates them, and draws the rectangle on the canvas. If the dimensions exceed the allowed range, an exception is thrown."
  },
  "api/ASE_Suyash_Silwal_77356849.MyAppReset.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyAppReset.html",
    "title": "Class MyAppReset | ASE Project",
    "keywords": "Class MyAppReset Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a command to reset the canvas. public class MyAppReset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyAppReset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyAppReset() Initializes a new instance of the MyAppReset class. public MyAppReset() MyAppReset(Canvas) Initializes a new instance of the MyAppReset class with the specified canvas. public MyAppReset(Canvas c) Parameters c Canvas The canvas to reset. Methods CheckParameters(string[]) Validates the parameters for the reset command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks No parameters are required for this command, so no validation is performed. Execute() Executes the reset command, resetting the canvas to its default state. public override void Execute()"
  },
  "api/ASE_Suyash_Silwal_77356849.MyAppStoredProgram.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyAppStoredProgram.html",
    "title": "Class MyAppStoredProgram | ASE Project",
    "keywords": "Class MyAppStoredProgram Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a stored program that can be executed on a canvas, with support for variables, methods, and conditional commands. This class extends BOOSE.StoredProgram and provides functionality to manage variables, methods, and execute commands in a stored program. public class MyAppStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram MyAppStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) StoredProgram.EvaluateExpressionWithString(string) ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyAppStoredProgram(ICanvas) Initializes a new instance of the MyAppStoredProgram class. public MyAppStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas The canvas on which the program will execute. Fields SyntaxOk public bool SyntaxOk Field Value bool Properties PC Gets or sets the program counter for the stored program. public override int PC { get; set; } Property Value int Methods Add(Command) Adds a command to the stored program. public override int Add(Command C) Parameters C Command The command to add. Returns int The index of the added command. Exceptions StoredProgramException Thrown when the command is null. AddMethod(Method) Adds a method to the stored program. public override void AddMethod(Method M) Parameters M Method The method to add to the program. AddVariable(Evaluation) Adds a variable to the stored program. public override void AddVariable(Evaluation Variable) Parameters Variable Evaluation The variable to add. Commandsleft() Checks if there are more commands to execute. public override bool Commandsleft() Returns bool True if there are more commands, otherwise false. DeleteVariable(string) Deletes a variable from the stored program. public override void DeleteVariable(string varName) Parameters varName string The name of the variable to delete. EvaluateExpression(string) Evaluates a mathematical expression represented as a string. public override string EvaluateExpression(string Exp) Parameters Exp string The expression to evaluate. Returns string The result of the evaluation as a string. Exceptions StoredProgramException Thrown when there is a syntax error or evaluation error. FindVariable(string) Finds the index of a variable by its name. public override int FindVariable(string varName) Parameters varName string The name of the variable to find. Returns int The index of the variable. GetMethod(string) Retrieves a method by its name. public override Method GetMethod(string MethodName) Parameters MethodName string The name of the method to retrieve. Returns Method The method with the specified name. Exceptions StoredProgramException Thrown when the method is not found. GetVarValue(string) Retrieves the value of a variable as a string. public override string GetVarValue(string varName) Parameters varName string The name of the variable to retrieve the value for. Returns string The string value of the variable. Exceptions StoredProgramException Thrown when the variable is not found. GetVariable(int) Retrieves a variable by its index. public override Evaluation GetVariable(int index) Parameters index int The index of the variable to retrieve. Returns Evaluation The variable at the specified index. Exceptions StoredProgramException Thrown when the index is invalid. GetVariable(string) Retrieves a variable by its name. public override Evaluation GetVariable(string VarName) Parameters VarName string The name of the variable to retrieve. Returns Evaluation The variable with the specified name. Exceptions StoredProgramException Thrown when the variable is not found. IsExpression(string) Determines if a string represents a valid expression. public override bool IsExpression(string expression) Parameters expression string The expression string to check. Returns bool True if the string is an expression, otherwise false. NextCommand() Retrieves the next command to be executed in the program. public override object NextCommand() Returns object The next command. Pop() Pops a conditional command from the stack. public override ConditionalCommand Pop() Returns ConditionalCommand The conditional command that was popped from the stack. Exceptions StoredProgramException Thrown when an error occurs while popping from the stack. Push(ConditionalCommand) Pushes a conditional command onto the stack for later execution. public override void Push(ConditionalCommand Com) Parameters Com ConditionalCommand The conditional command to push. ResetProgram() Resets the program, clearing the canvas and clearing variables and methods. public virtual void ResetProgram() Run() Executes the stored program. public override void Run() UpdateVariable(string, bool) Updates the value of a variable (boolean type). public override void UpdateVariable(string varName, bool value) Parameters varName string The name of the variable to update. value bool The new value to set. Exceptions CommandException Thrown when the type of the variable is not compatible. UpdateVariable(string, double) Updates the value of a variable (real type). public override void UpdateVariable(string varName, double value) Parameters varName string The name of the variable to update. value double The new value to set. Exceptions CommandException Thrown when the type of the variable is not compatible. UpdateVariable(string, int) Updates the value of a variable (int type). public override void UpdateVariable(string varName, int value) Parameters varName string The name of the variable to update. value int The new value to set. VariableExists(string) Checks if a variable exists in the stored program. public override bool VariableExists(string varName) Parameters varName string The name of the variable to check. Returns bool True if the variable exists, otherwise false."
  },
  "api/ASE_Suyash_Silwal_77356849.MyAppTriangle.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyAppTriangle.html",
    "title": "Class MyAppTriangle | ASE Project",
    "keywords": "Class MyAppTriangle Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a command to draw a triangle on a canvas. public class MyAppTriangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters MyAppTriangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyAppTriangle() Initializes a new instance of the MyAppTriangle class. public MyAppTriangle() MyAppTriangle(Canvas, int, int) Initializes a new instance of the MyAppTriangle class with the specified canvas, base length, and height. public MyAppTriangle(Canvas c, int baseLength, int height) Parameters c Canvas The canvas to draw the triangle on. baseLength int The base length of the triangle. height int The height of the triangle. Methods CheckParameters(string[]) Validates the parameters for the triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks This method checks that exactly two parameters are provided: base length and height. Exceptions CommandException Thrown when the parameter list is invalid or incomplete. Execute() Executes the command to draw a triangle on the canvas. public override void Execute() Remarks This method validates the parameters (base length and height), checks for any restriction violations, and then uses the canvas object to draw the triangle with the specified dimensions."
  },
  "api/ASE_Suyash_Silwal_77356849.MyAppWriteText.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyAppWriteText.html",
    "title": "Class MyAppWriteText | ASE Project",
    "keywords": "Class MyAppWriteText Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a command to write text on a canvas. This command processes the input text and writes it on the canvas if it passes validation checks. public class MyAppWriteText : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyAppWriteText Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyAppWriteText() Initializes a new instance of the MyAppWriteText class. public MyAppWriteText() MyAppWriteText(Canvas, string) Initializes a new instance of the MyAppWriteText class with specified canvas and text. public MyAppWriteText(Canvas c, string text) Parameters c Canvas The canvas where the text will be written. text string The text to write on the canvas. Methods CheckParameters(string[]) Checks the parameters for the command to ensure they are valid. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters for the command. Exceptions CommandException Thrown when the parameters are invalid. Execute() Executes the command to write the processed text on the canvas. Validates the text and processes it if necessary. public override void Execute()"
  },
  "api/ASE_Suyash_Silwal_77356849.MyStoredProgram.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.MyStoredProgram.html",
    "title": "Class MyStoredProgram | ASE Project",
    "keywords": "Class MyStoredProgram Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a stored program that can be executed on a canvas, with support for variables, methods, and conditional commands. public class MyStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram MyStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) StoredProgram.Add(Command) StoredProgram.NextCommand() StoredProgram.Commandsleft() StoredProgram.Run() ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyStoredProgram(ICanvas) Initializes a new instance of the MyStoredProgram class with a specified canvas. public MyStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas The canvas on which the program will be executed. Fields SyntaxOk public bool SyntaxOk Field Value bool Properties PC Gets or sets the program counter, which determines the current command to execute. public virtual int PC { get; set; } Property Value int Methods AddMethod(Method) Adds a method to the program's list of methods. public virtual void AddMethod(Method M) Parameters M Method The method to add. AddVariable(Evaluation) Adds a variable to the program's list of variables. public virtual void AddVariable(Evaluation Variable) Parameters Variable Evaluation The variable to add. DeleteVariable(string) Deletes a variable from the program. public virtual void DeleteVariable(string varName) Parameters varName string The name of the variable to delete. EvaluateExpression(string) Evaluates an expression and returns the result. public virtual string EvaluateExpression(string Exp) Parameters Exp string The expression to evaluate. Returns string The result of the expression. EvaluateExpressionWithString(string) Evaluates an expression and returns the result as a string. public virtual string EvaluateExpressionWithString(string expression) Parameters expression string The expression to evaluate. Returns string The result of the expression as a string. FindVariable(string) Finds the index of a variable by its name. public virtual int FindVariable(string varName) Parameters varName string The name of the variable to find. Returns int The index of the variable, or -1 if not found. GetMethod(string) Retrieves a method by its name. public virtual Method GetMethod(string MethodName) Parameters MethodName string The name of the method to retrieve. Returns Method The method corresponding to the given name. GetVarValue(string) Retrieves the value of a variable as a string. public virtual string GetVarValue(string varName) Parameters varName string The name of the variable. Returns string The value of the variable as a string. GetVariable(int) Retrieves a variable by its index. public virtual Evaluation GetVariable(int index) Parameters index int The index of the variable. Returns Evaluation The variable corresponding to the given index. GetVariable(string) Retrieves a variable by its name. public virtual Evaluation GetVariable(string VarName) Parameters VarName string The name of the variable to retrieve. Returns Evaluation The variable corresponding to the given name. IsExpression(string) Checks if the given string is an expression. public virtual bool IsExpression(string expression) Parameters expression string The expression to check. Returns bool True if the string is an expression, false otherwise. Pop() Pops a conditional command from the stack. public virtual ConditionalCommand Pop() Returns ConditionalCommand The popped conditional command. Push(ConditionalCommand) Pushes a conditional command onto the stack. public virtual void Push(ConditionalCommand Com) Parameters Com ConditionalCommand The conditional command to push. ResetProgram() Resets the program to its initial state. public virtual void ResetProgram() UpdateVariable(string, bool) Updates a variable's value with a boolean value. public virtual void UpdateVariable(string varName, bool value) Parameters varName string The name of the variable. value bool The new boolean value. UpdateVariable(string, double) Updates a variable's value with a double value. public virtual void UpdateVariable(string varName, double value) Parameters varName string The name of the variable. value double The new double value. UpdateVariable(string, int) Updates a variable's value with an integer value. public virtual void UpdateVariable(string varName, int value) Parameters varName string The name of the variable. value int The new integer value. VariableExists(string) Checks if a variable with the given name exists. public virtual bool VariableExists(string varName) Parameters varName string The name of the variable. Returns bool True if the variable exists, false otherwise."
  },
  "api/ASE_Suyash_Silwal_77356849.PenSize.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.PenSize.html",
    "title": "Class PenSize | ASE Project",
    "keywords": "Class PenSize Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll public class PenSize : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter PenSize Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PenSize() public PenSize() PenSize(Canvas, int) public PenSize(Canvas c, int pensize) Parameters c Canvas pensize int Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute() SetPenSize(int) public void SetPenSize(int penSize) Parameters penSize int"
  },
  "api/ASE_Suyash_Silwal_77356849.Reset.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.Reset.html",
    "title": "Class Reset | ASE Project",
    "keywords": "Class Reset Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a command to reset the canvas. public class Reset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Reset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Reset() Initializes a new instance of the Reset class. public Reset() Reset(Canvas) Initializes a new instance of the Reset class with the specified canvas. public Reset(Canvas c) Parameters c Canvas The canvas to reset. Methods CheckParameters(string[]) Validates the parameters for the reset command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks No parameters are required for this command, so no validation is performed. Execute() Executes the reset command, resetting the canvas to its default state. public override void Execute()"
  },
  "api/ASE_Suyash_Silwal_77356849.Triangle.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.Triangle.html",
    "title": "Class Triangle | ASE Project",
    "keywords": "Class Triangle Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a command to draw a triangle on a canvas. public class Triangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Triangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Triangle() Initializes a new instance of the Triangle class. public Triangle() Triangle(Canvas, int, int) Initializes a new instance of the Triangle class with the specified canvas, base length, and height. public Triangle(Canvas c, int baseLength, int height) Parameters c Canvas The canvas to draw the triangle on. baseLength int The base length of the triangle. height int The height of the triangle. Methods CheckParameters(string[]) Validates the parameters for the triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks This method checks that exactly two parameters are provided: base length and height. Exceptions CommandException Thrown when the parameter list is invalid or incomplete. Execute() Executes the command to draw a triangle on the canvas. public override void Execute() Remarks This method validates the parameters (base length and height), checks for any restriction violations, and then uses the canvas object to draw the triangle with the specified dimensions."
  },
  "api/ASE_Suyash_Silwal_77356849.WriteText.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.WriteText.html",
    "title": "Class WriteText | ASE Project",
    "keywords": "Class WriteText Namespace ASE_Suyash_Silwal_77356849 Assembly ASE_Suyash_Silwal_77356849.dll Represents a command to write text on a canvas. public class WriteText : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter WriteText Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WriteText() Initializes a new instance of the WriteText class. public WriteText() WriteText(Canvas, string) Initializes a new instance of the WriteText class with specified canvas and text. public WriteText(Canvas c, string text) Parameters c Canvas The canvas where the text will be written. text string The text to be written. Methods CheckParameters(string[]) Validates the parameters for the command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks This method ensures that exactly one parameter (the text) is provided and checks if it is not null, empty, or whitespace. Exceptions CommandException Thrown when the parameter validation fails. Execute() Executes the command to write text on the canvas. public override void Execute() Remarks This method extracts the text from the parameters, validates its content and length, and then writes it to the canvas using the WriteText(string) method."
  },
  "api/ASE_Suyash_Silwal_77356849.html": {
    "href": "api/ASE_Suyash_Silwal_77356849.html",
    "title": "Namespace ASE_Suyash_Silwal_77356849 | ASE Project",
    "keywords": "Namespace ASE_Suyash_Silwal_77356849 Classes AppConditionalCommand AppFor ApplicationArray Represents an application array that supports operations like initialization, execution, and parameter checking. ApplicationBoolean Represents a boolean application that extends the BOOSE.Boolean class. ApplicationCast Represents a casting operation between two variables within the BOOSE framework. This class supports casting an integer value to a real value and ensures appropriate checks. ApplicationCompoundCommand ApplicationElse Represents an Else command in the application. This class handles the compilation, execution, and validation of an Else command. ApplicationEnd Represents the End command in the application. Handles the compilation and execution of the End command, which marks the termination of control flow structures such as If, While, and For. ApplicationIf Represents the If command in the application. This class handles conditional logic and its associated functionalities. ApplicationInt Represents an integer-based command in the application. This class extends the BOOSE.Int class and implements its specific restrictions. ApplicationMethod ApplicationPeek Represents the Peek operation on an array in the application. This class extends ApplicationArray to perform Peek operations, which retrieves a value from an array without modifying the array. ApplicationPoke Represents the Poke operation on an array in the application. This class extends ApplicationArray to perform Poke operations, which modify an element in the array. ApplicationReal Represents a real-number-based command in the application. This class extends BOOSE.Real and implements its specific restrictions. ApplicationWhile Represents the While loop command in the application. This class handles the logic and functionality for While loops. Form1 GlobalConfig Represents a global configuration for the application. MyAppCircle Represents a command to draw a circle on a canvas. MyAppClear Represents a command to clear all elements from the canvas. MyAppDrawTo Represents a command to draw a line from the current position to a specified coordinate on the canvas. MyAppFill A command class that fills a shape on the canvas based on the given text. MyAppMoveTo Represents a command to move a shape to the specified coordinates on the canvas. MyAppPenColour Represents a command to set the pen color on a canvas. MyAppPenSize MyAppRectangle Represents a command to draw a rectangle on a canvas. MyAppReset Represents a command to reset the canvas. MyAppStoredProgram Represents a stored program that can be executed on a canvas, with support for variables, methods, and conditional commands. This class extends BOOSE.StoredProgram and provides functionality to manage variables, methods, and execute commands in a stored program. MyAppTriangle Represents a command to draw a triangle on a canvas. MyAppWriteText Represents a command to write text on a canvas. This command processes the input text and writes it on the canvas if it passes validation checks."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE Project",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE Project",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE Project",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}